[
  {
    "objectID": "Pages/index.html",
    "href": "Pages/index.html",
    "title": "Magnetic Field Simulator",
    "section": "",
    "text": "Magnetic Field Simulator\nThe aim of this is to create a program/library which will simulate and display the magnetic field of an electonic component.\nVolumetric Vector Field Analysis",
    "crumbs": [
      "Magnetic Field Simulator"
    ]
  },
  {
    "objectID": "MagFieldSim.html",
    "href": "MagFieldSim.html",
    "title": "Volumetric Vector Field Analysis",
    "section": "",
    "text": "Code\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n\n\n\n\nCode\n\nbs.write_target_volume(\"coil.txt\", \"coil\", (30, 15, 15), (-5, -0.5, -2.5), 1, 1)\n# generates a target volume from the coil stored at coil.txt\n# uses a 30 x 15 x 15 bounding box, starting at (-5, -0.5, -2.5)\n# uses 1 cm resolution\n\nbs.plot_coil(\"coil.txt\")\n# plots the coil stored at coil.txt\n\nfields, positions = bs.read_target_volume(\"coil\")\n# reads the volume we created\n\nbs.plot_fields(fields, positions, which_plane='z', level=5, num_contours=50)\n# plots the fields we just produced\n# plotting along the plane x = 5, with 50 contours\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTry to create A volume of Magnetic field vectors to simulate there effects on circuitry. First hurdle is defining the circuit.\n\n\nCode\nclass Field(object):\n    def __init__(self,Dim=(10,10,10)):\n        self.coords= np.indices(Dim)\n        self.create_wire()\n    def create_wire(self,corners=[[0,2],[5,2],[5,8],[10,8]]):\n        self.wire = self.coords\n        for i in range(len(corners)-1):\n            self.wire = self.wire | (((self.coords[0] &gt;corners[i][0] )&(self.coords[0] &lt; corners[i+1][0])) & ((self.coords[1] == corners[i][1])&(self.coords[0] &lt; corners[i+1][0])) & (self.coords[2]  == 5))\n\n    def gen_field(self):\n        self.field = ((self.coords[0] &lt; 5) & (self.coords[1] == 2) & (self.coords[2]  == 2)) | ((self.coords[0] == 5) & (self.coords[1] &gt;= 2)& (self.coords[1] &lt; 8) & (self.coords[2]  == 2))\n        return self.field\n    def get_voxels(self):\n        return self.coords                    \n    def plot(self):\n        self.gen_field()\n        colors = np.empty(self.wire.shape, dtype=object)\n        colors[self.wire] = 'blue'\n        ax = plt.figure(figsize=(10,10)).add_subplot(projection='3d')\n        \n        ax.voxels(self.wire, facecolors=colors, edgecolor='k')\n\n        x, y, z = np.meshgrid(np.arange(0, 10, 1),np.arange(0, 10, 1),np.arange(0, 10, 1))\n\n        # Make the direction data for the arrows\n        u = np.sin(np.pi * x) * np.cos(20*np.pi * y) * np.cos(20*np.pi * z)\n        v = -np.cos(20*np.pi * x) * np.sin(20*np.pi * y) * np.cos(20*np.pi * z)\n        w = (np.sqrt(2.0 / 3.0) * np.cos(20*np.pi * x) * np.cos(20*np.pi * y) *\n            np.sin(np.pi * z))\n\n        ax.quiver(x, y, z, u, v, w, length=0.5, normalize=True)\n\n        ax.set_xlabel(\"x\")\n        ax.set_ylabel(\"y\")\n        ax.set_zlabel(\"z\")\n        \n        plt.show()\n\n\n\n\nCode\nf= Field()\nf.plot()\n\n\nIndexError: index 3 is out of bounds for axis 0 with size 3",
    "crumbs": [
      "Volumetric Vector Field Analysis"
    ]
  }
]